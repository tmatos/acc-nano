#ifndef _ALTERA_HPS_0_H_
#define _ALTERA_HPS_0_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'soc_system' in
 * file './soc_system.sopcinfo'.
 */

/*
 * This file contains macros for module 'hps_0' and devices
 * connected to the following masters:
 *   h2f_axi_master
 *   h2f_lw_axi_master
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'onchip_ram', class 'altera_avalon_onchip_memory2'
 * The macros are prefixed with 'ONCHIP_RAM_'.
 * The prefix is the slave descriptor.
 */
#define ONCHIP_RAM_COMPONENT_TYPE altera_avalon_onchip_memory2
#define ONCHIP_RAM_COMPONENT_NAME onchip_ram
#define ONCHIP_RAM_BASE 0x0
#define ONCHIP_RAM_SPAN 1024
#define ONCHIP_RAM_END 0x3ff
#define ONCHIP_RAM_ALLOW_IN_SYSTEM_MEMORY_CONTENT_EDITOR 0
#define ONCHIP_RAM_ALLOW_MRAM_SIM_CONTENTS_ONLY_FILE 0
#define ONCHIP_RAM_CONTENTS_INFO ""
#define ONCHIP_RAM_DUAL_PORT 1
#define ONCHIP_RAM_GUI_RAM_BLOCK_TYPE AUTO
#define ONCHIP_RAM_INIT_CONTENTS_FILE soc_system_onchip_ram
#define ONCHIP_RAM_INIT_MEM_CONTENT 1
#define ONCHIP_RAM_INSTANCE_ID NONE
#define ONCHIP_RAM_NON_DEFAULT_INIT_FILE_ENABLED 0
#define ONCHIP_RAM_RAM_BLOCK_TYPE AUTO
#define ONCHIP_RAM_READ_DURING_WRITE_MODE DONT_CARE
#define ONCHIP_RAM_SINGLE_CLOCK_OP 0
#define ONCHIP_RAM_SIZE_MULTIPLE 1
#define ONCHIP_RAM_SIZE_VALUE 1024
#define ONCHIP_RAM_WRITABLE 1
#define ONCHIP_RAM_MEMORY_INFO_DAT_SYM_INSTALL_DIR SIM_DIR
#define ONCHIP_RAM_MEMORY_INFO_GENERATE_DAT_SYM 1
#define ONCHIP_RAM_MEMORY_INFO_GENERATE_HEX 1
#define ONCHIP_RAM_MEMORY_INFO_HAS_BYTE_LANE 0
#define ONCHIP_RAM_MEMORY_INFO_HEX_INSTALL_DIR QPF_DIR
#define ONCHIP_RAM_MEMORY_INFO_MEM_INIT_DATA_WIDTH 32
#define ONCHIP_RAM_MEMORY_INFO_MEM_INIT_FILENAME soc_system_onchip_ram

/*
 * Macros for device 'sysid_qsys', class 'altera_avalon_sysid_qsys'
 * The macros are prefixed with 'SYSID_QSYS_'.
 * The prefix is the slave descriptor.
 */
#define SYSID_QSYS_COMPONENT_TYPE altera_avalon_sysid_qsys
#define SYSID_QSYS_COMPONENT_NAME sysid_qsys
#define SYSID_QSYS_BASE 0x1000
#define SYSID_QSYS_SPAN 8
#define SYSID_QSYS_END 0x1007
#define SYSID_QSYS_ID 2899645186
#define SYSID_QSYS_TIMESTAMP 1566172517

/*
 * Macros for device 'jtag_uart', class 'altera_avalon_jtag_uart'
 * The macros are prefixed with 'JTAG_UART_'.
 * The prefix is the slave descriptor.
 */
#define JTAG_UART_COMPONENT_TYPE altera_avalon_jtag_uart
#define JTAG_UART_COMPONENT_NAME jtag_uart
#define JTAG_UART_BASE 0x2000
#define JTAG_UART_SPAN 8
#define JTAG_UART_END 0x2007
#define JTAG_UART_IRQ 2
#define JTAG_UART_READ_DEPTH 64
#define JTAG_UART_READ_THRESHOLD 8
#define JTAG_UART_WRITE_DEPTH 64
#define JTAG_UART_WRITE_THRESHOLD 8

/*
 * Macros for device 'led_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'LED_PIO_'.
 * The prefix is the slave descriptor.
 */
#define LED_PIO_COMPONENT_TYPE altera_avalon_pio
#define LED_PIO_COMPONENT_NAME led_pio
#define LED_PIO_BASE 0x3000
#define LED_PIO_SPAN 16
#define LED_PIO_END 0x300f
#define LED_PIO_BIT_CLEARING_EDGE_REGISTER 0
#define LED_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define LED_PIO_CAPTURE 0
#define LED_PIO_DATA_WIDTH 7
#define LED_PIO_DO_TEST_BENCH_WIRING 0
#define LED_PIO_DRIVEN_SIM_VALUE 0
#define LED_PIO_EDGE_TYPE NONE
#define LED_PIO_FREQ 50000000
#define LED_PIO_HAS_IN 0
#define LED_PIO_HAS_OUT 1
#define LED_PIO_HAS_TRI 0
#define LED_PIO_IRQ_TYPE NONE
#define LED_PIO_RESET_VALUE 127

/*
 * Macros for device 'pio_controle_start', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_CONTROLE_START_'.
 * The prefix is the slave descriptor.
 */
#define PIO_CONTROLE_START_COMPONENT_TYPE altera_avalon_pio
#define PIO_CONTROLE_START_COMPONENT_NAME pio_controle_start
#define PIO_CONTROLE_START_BASE 0x3010
#define PIO_CONTROLE_START_SPAN 16
#define PIO_CONTROLE_START_END 0x301f
#define PIO_CONTROLE_START_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_CONTROLE_START_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_CONTROLE_START_CAPTURE 0
#define PIO_CONTROLE_START_DATA_WIDTH 1
#define PIO_CONTROLE_START_DO_TEST_BENCH_WIRING 0
#define PIO_CONTROLE_START_DRIVEN_SIM_VALUE 0
#define PIO_CONTROLE_START_EDGE_TYPE NONE
#define PIO_CONTROLE_START_FREQ 50000000
#define PIO_CONTROLE_START_HAS_IN 0
#define PIO_CONTROLE_START_HAS_OUT 1
#define PIO_CONTROLE_START_HAS_TRI 0
#define PIO_CONTROLE_START_IRQ_TYPE NONE
#define PIO_CONTROLE_START_RESET_VALUE 0

/*
 * Macros for device 'pio_controle_finish', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_CONTROLE_FINISH_'.
 * The prefix is the slave descriptor.
 */
#define PIO_CONTROLE_FINISH_COMPONENT_TYPE altera_avalon_pio
#define PIO_CONTROLE_FINISH_COMPONENT_NAME pio_controle_finish
#define PIO_CONTROLE_FINISH_BASE 0x3020
#define PIO_CONTROLE_FINISH_SPAN 16
#define PIO_CONTROLE_FINISH_END 0x302f
#define PIO_CONTROLE_FINISH_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_CONTROLE_FINISH_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_CONTROLE_FINISH_CAPTURE 0
#define PIO_CONTROLE_FINISH_DATA_WIDTH 1
#define PIO_CONTROLE_FINISH_DO_TEST_BENCH_WIRING 0
#define PIO_CONTROLE_FINISH_DRIVEN_SIM_VALUE 0
#define PIO_CONTROLE_FINISH_EDGE_TYPE NONE
#define PIO_CONTROLE_FINISH_FREQ 50000000
#define PIO_CONTROLE_FINISH_HAS_IN 1
#define PIO_CONTROLE_FINISH_HAS_OUT 0
#define PIO_CONTROLE_FINISH_HAS_TRI 0
#define PIO_CONTROLE_FINISH_IRQ_TYPE NONE
#define PIO_CONTROLE_FINISH_RESET_VALUE 0

/*
 * Macros for device 'dipsw_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'DIPSW_PIO_'.
 * The prefix is the slave descriptor.
 */
#define DIPSW_PIO_COMPONENT_TYPE altera_avalon_pio
#define DIPSW_PIO_COMPONENT_NAME dipsw_pio
#define DIPSW_PIO_BASE 0x4000
#define DIPSW_PIO_SPAN 16
#define DIPSW_PIO_END 0x400f
#define DIPSW_PIO_IRQ 0
#define DIPSW_PIO_BIT_CLEARING_EDGE_REGISTER 1
#define DIPSW_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define DIPSW_PIO_CAPTURE 1
#define DIPSW_PIO_DATA_WIDTH 4
#define DIPSW_PIO_DO_TEST_BENCH_WIRING 0
#define DIPSW_PIO_DRIVEN_SIM_VALUE 0
#define DIPSW_PIO_EDGE_TYPE ANY
#define DIPSW_PIO_FREQ 50000000
#define DIPSW_PIO_HAS_IN 1
#define DIPSW_PIO_HAS_OUT 0
#define DIPSW_PIO_HAS_TRI 0
#define DIPSW_PIO_IRQ_TYPE EDGE
#define DIPSW_PIO_RESET_VALUE 0

/*
 * Macros for device 'button_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'BUTTON_PIO_'.
 * The prefix is the slave descriptor.
 */
#define BUTTON_PIO_COMPONENT_TYPE altera_avalon_pio
#define BUTTON_PIO_COMPONENT_NAME button_pio
#define BUTTON_PIO_BASE 0x5000
#define BUTTON_PIO_SPAN 16
#define BUTTON_PIO_END 0x500f
#define BUTTON_PIO_IRQ 1
#define BUTTON_PIO_BIT_CLEARING_EDGE_REGISTER 1
#define BUTTON_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define BUTTON_PIO_CAPTURE 1
#define BUTTON_PIO_DATA_WIDTH 2
#define BUTTON_PIO_DO_TEST_BENCH_WIRING 0
#define BUTTON_PIO_DRIVEN_SIM_VALUE 0
#define BUTTON_PIO_EDGE_TYPE FALLING
#define BUTTON_PIO_FREQ 50000000
#define BUTTON_PIO_HAS_IN 1
#define BUTTON_PIO_HAS_OUT 0
#define BUTTON_PIO_HAS_TRI 0
#define BUTTON_PIO_IRQ_TYPE EDGE
#define BUTTON_PIO_RESET_VALUE 0

/*
 * Macros for device 'ILC', class 'interrupt_latency_counter'
 * The macros are prefixed with 'ILC_'.
 * The prefix is the slave descriptor.
 */
#define ILC_COMPONENT_TYPE interrupt_latency_counter
#define ILC_COMPONENT_NAME ILC
#define ILC_BASE 0x30000
#define ILC_SPAN 256
#define ILC_END 0x300ff


#endif /* _ALTERA_HPS_0_H_ */
